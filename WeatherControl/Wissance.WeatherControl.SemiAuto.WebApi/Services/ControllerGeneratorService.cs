using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.Loader;
using Microsoft.AspNetCore.Mvc;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.Extensions.DependencyInjection;
using Wissance.WeatherControl.Common.Automation;
using Wissance.WeatherControl.Data.Entity;
using Wissance.WebApiToolkit.Core.Controllers;
using Wissance.WebApiToolkit.Core.Data;
using Wissance.WebApiToolkit.Core.Managers;

namespace Wissance.WeatherControl.SemiAuto.WebApi.Services
{
    public static class ControllerGeneratorService
    {
        public static Assembly ConfigureAutoControllers(this IServiceCollection services)
        {
            try
            {
                string sourceCode = @"
            using System;
            using Wissance.WebApiToolkit.Core.Controllers;
            using Wissance.WebApiToolkit.Core.Data;
            using Wissance.WebApiToolkit.Core.Managers;
            // using Wissance.WeatherControl.Common.Automation;
            using Wissance.WeatherControl.Data.Entity;


            namespace Controllers
            {
                public class StationController : BasicCrudController<StationEntity, StationEntity, Guid, EmptyAdditionalFilters>
                {
                    public StationController(IModelManager<StationEntity, StationEntity, Guid> manager)
                    {
                        Manager = manager;
                    }
                }
            }";
                SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);

                // Create a compilation
                string assemblyName = "Wissance.AutoGenerated";
                
                CSharpCompilation compilation = CSharpCompilation.Create(
                    assemblyName,
                    syntaxTrees: new[] { syntaxTree },
                    references: new[]
                    {
                        MetadataReference.CreateFromFile(Assembly.GetExecutingAssembly().Location),
                        MetadataReference.CreateFromFile(@"C:\Program Files\dotnet\sdk\8.0.202\TestHostNetFramework\System.Runtime.dll"),
                        // MetadataReference.CreateFromFile(@"C:\Program Files\dotnet\sdk\8.0.202\ref\netstandard.dll"),
                        MetadataReference.CreateFromFile(typeof(Guid).Assembly.Location),
                        MetadataReference.CreateFromFile(typeof(System.Runtime.ControlledExecution).Assembly.Location),
                        
                        
                        MetadataReference.CreateFromFile(typeof(ControllerBase).Assembly.Location),
                        MetadataReference.CreateFromFile(typeof(EmptyAdditionalFilters).Assembly.Location),
                        MetadataReference.CreateFromFile(typeof(StationEntity).Assembly.Location),
                    },
                    options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
                Assembly assembly = null;
                using (var ms = new MemoryStream())
                {
                    // Emit the assembly to a memory stream
                    Microsoft.CodeAnalysis.Emit.EmitResult result = compilation.Emit(ms);

                    if (!result.Success)
                    {
                        // Handle compilation errors
                        Console.WriteLine("Compilation failed:");
                        foreach (Diagnostic diagnostic in result.Diagnostics.Where(d => d.IsWarningAsError || d.Severity == DiagnosticSeverity.Error))
                        {
                            Console.WriteLine($"{diagnostic.Id}: {diagnostic.GetMessage()}");
                        }
                        return null;
                    }

                    ms.Seek(0, SeekOrigin.Begin);

                    // Load the assembly from the memory stream
                    AssemblyLoadContext assemblyContext = new AssemblyLoadContext(assemblyName, isCollectible: true);
                    assembly = assemblyContext.LoadFromStream(ms);
                    // Access and invoke a method from the dynamic assembly
                    //Type dynamicType = assembly.GetType("DynamicAssembly.DynamicClass");
                    //object instance = Activator.CreateInstance(dynamicType);
                    //MethodInfo method = dynamicType.GetMethod("GetMessage");
                    //string message = (string)method.Invoke(instance, null);

                    //Console.WriteLine(message);

                    // Unload the assembly context (if collectible)
                    //assemblyContext.Unload();
                }
                return assembly;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        public static Assembly ConfigureAutoControllersV2(this IServiceCollection services)
        {
            try
            {
                AssemblyName assemblyName = new AssemblyName("AutoGeneratedControllers");
                // temporarily used Persist
                AssemblyBuilder assemblyBuilder = AssemblyBuilder.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.RunAndCollect);
                
                ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule("AutoGeneratedControllers");
                TypeBuilder typeBuilder = moduleBuilder.DefineType("StationController",
                    TypeAttributes.Public | TypeAttributes.Class,
                    typeof(GenericController<StationEntity, StationEntity, Guid, EmptyAdditionalFilters>));

                // todo(umv): add constructor
                /*string[] typeParamNames = {"TRes", "TData", "TId", "TFilter"};
                GenericTypeParameterBuilder[] typeParams = typeBuilder.DefineGenericParameters(typeParamNames);
                // add constraints
                GenericTypeParameterBuilder tRes = typeParams[0];
                GenericTypeParameterBuilder tData = typeParams[1];
                GenericTypeParameterBuilder tId = typeParams[2];
                GenericTypeParameterBuilder tFilter = typeParams[2];
                tRes.SetGenericParameterAttributes(GenericParameterAttributes.ReferenceTypeConstraint);
                tFilter.SetGenericParameterAttributes(GenericParameterAttributes.ReferenceTypeConstraint);
                tFilter.SetBaseTypeConstraint(typeof(EmptyAdditionalFilters));*/
                
                //GenericTypeParameterBuilder[] constructorParams = typeBuilder.DefineGenericParameters(new []{"IModelManager<StationEntity, StationEntity, Guid>"});
                //GenericTypeParameterBuilder tManager = constructorParams[0];
                //tManager.SetInterfaceConstraints(new Type[] {typeof(IModelManager<StationEntity, StationEntity, Guid>)});

                ConstructorBuilder constructorBuilder = typeBuilder.DefineConstructor(
                    MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName,
                    CallingConventions.Standard,
                    new Type[] {typeof(IModelManager<StationEntity, StationEntity, Guid>)});
                    //new Type[]{tManager.MakeArrayType()});
                
                    //DefineParameter(1, ParameterAttributes.In, "manager");
               

                ILGenerator ilGenerator = constructorBuilder.GetILGenerator();
                // load this
                ilGenerator.Emit(OpCodes.Ldarg_0);
                // load arg0 -> manager
                ilGenerator.Emit(OpCodes.Ldarg_1);
                ConstructorInfo baseCtor = typeof(GenericController<StationEntity, StationEntity, Guid, EmptyAdditionalFilters>).GetConstructor(new []{typeof(IModelManager<StationEntity, StationEntity, Guid>)});
                ilGenerator.Emit(OpCodes.Call, baseCtor);
                //ilGenerator.Emit(OpCodes.Stfld, typeBuilder.DefineField($"_Manager__BackingField_set", 
                  //  typeof(IModelManager<StationEntity, StationEntity, Guid>), 
                  //  FieldAttributes.Private)); // Set the value at the backing field
                ilGenerator.Emit(OpCodes.Ret); // Return from the constructor
                Type t = typeBuilder.CreateType();
                Assembly ass = Assembly.GetAssembly(t);    
                
                IServiceProvider serviceProvider = services.BuildServiceProvider();
                IModelManager<StationEntity, StationEntity, Guid> mn = serviceProvider.GetRequiredService<IModelManager<StationEntity, StationEntity, Guid>>();
                object instance = Activator.CreateInstance(t,new object[]{mn});
                return ass;
            }
            catch (Exception e)
            {
                return null;
            }
        }
    }
}